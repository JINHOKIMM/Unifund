<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC   "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd"
>
<!-- 이 xml 은 어떤 interface 를 참조해서 사용해야 하는가? -->
<mapper namespace="com.uni.fund.project.dao.ProjectDAO">
	<select id="detail" resultType="com.uni.fund.project.dto.ProjectDTO">
		select
			* 	
			,(select cate_name from category 
				where 
					cate_idx = (select cate_idx from project where pro_idx = #{param2})) as category
			,(select mem_id from member where mem_idx = (select mem_idx from project where pro_idx = #{param2})) as userId
			,(select COUNT(pro_idx) from project_like where pro_idx = #{param2} group by pro_idx) as like_cnt
			,(select SUM(a.total) from 
				(select total_price as total from project_apply where pro_idx = #{param2} and fund_state = 'A' order by mem_idx,fund_idx desc) a) as now_price
			,(select (rew_price * rew_max) from project p where pro_idx = #{param2}) as target_price
			,(select mem_mileage from member where mem_idx = #{param1}) as mileage
			,(select mem_cash from member where mem_idx = #{param1}) as cash
			,(select mem_post from member where mem_idx =#{param1}) as mem_post 
			,(select mem_addr from member where mem_idx =#{param1}) as mem_addr 
			,(select mem_detail from member where mem_idx =#{param1}) as mem_detail
			,(select round((now_price/target_price) * 100)) as progress 
			,(select pho_name from photo where ref_idx = #{param2} and pho_division = '프로젝트') as pro_img_name
			,(select fund_state from project_apply where mem_idx = #{param1} and pro_idx = #{param2} order by fund_idx desc limit 1) as fund_state
			,(select pho_name from photo where ref_idx = #{param1} and pho_division = '프로필') as profile
			,(select mem_idx from project_like where pro_idx = #{param2} and mem_idx = #{param1}) as like_mem_idx
			,(select mem_idx from bookmark where pro_idx = #{param2} and mem_idx = #{param1}) as favorite_mem_idx
		from project where pro_idx = #{param2};
	</select>
	
	<insert id="projectCreate"
		useGeneratedKeys="true" 
		keyColumn="pro_idx" 
		keyProperty="pro_idx"
		parameterType= "com.uni.fund.project.dto.ProjectDTO">
		INSERT INTO project(mem_idx,cate_idx,pro_title,pro_content,pro_deadline,pro_startdate,rew_name,ori_price,rew_price,rew_max,pro_phone,pro_tos)
		VALUES (#{mem_idx},#{cate_idx},#{pro_title},#{pro_content},#{pro_deadline},#{pro_startdate},#{rew_name},#{ori_price},#{rew_price},#{rew_max},#{pro_phone},#{pro_tos})
	</insert>
	
	<insert id="createMainPhoto">
		INSERT INTO photo(ref_idx, pho_name, pho_division)
		VALUES(#{param1},#{param2},#{param3})
	</insert>
	
	<insert id="createPhoto">
		INSERT INTO photo(ref_idx, pho_name, pho_division) 
		VALUES(#{param1},#{param2},#{param3})
	</insert>
	
	<select id="updateForm" resultType="com.uni.fund.project.dto.ProjectDTO">
	SELECT 
    	j.mem_idx, j.pro_title, j.pro_idx,
    	(SELECT p.pho_name FROM photo p WHERE p.pho_division = '프로젝트대표사진' AND ref_idx = j.pro_idx order by pho_idx desc limit 1) as pro_main_name, 
    	j.pro_content, 
    	(SELECT p.pho_name FROM photo p WHERE p.pho_division = '프로젝트' AND ref_idx = j.pro_idx order by pho_idx desc limit 1) as pro_img_name,
    	j.cate_idx, j.pro_phone, j.rew_name, j.ori_price, j.rew_max, j.rew_price, j.pro_deadline, j.pro_startdate, j.pro_tos
	FROM 
    	project j
	WHERE 
    j.pro_idx = #{param1};
	</select>
	
	<select id="checkFundPeople" resultType="int">
		SELECT COUNT(fund_state) FROM project_apply WHERE fund_state = 'A' and pro_idx = #{param1}
	</select>
	
	<update id="projectUpdate" parameterType="map">
		UPDATE project 
		SET pro_title=#{pro_title}, pro_content=#{pro_content}, cate_idx=#{cate_idx}, pro_phone=#{pro_phone}, 
			rew_name=#{rew_name}, ori_price=#{ori_price}, rew_max=#{rew_max}, rew_price=#{rew_price}, pro_deadline=#{pro_deadline},
			pro_startdate=#{pro_startdate}
		WHERE pro_idx=#{pro_idx}
	</update>
	
	<select id="projectTotalCnt" resultType="int">
		SELECT 
			COUNT(p.pro_idx) 
		FROM project p
		WHERE p.pro_state IN('B','C')
        <if test="keyword != null and keyword != '' ">
            AND p.pro_title like CONCAT('%',#{keyword},'%')
        </if>
		<if test="category != null and category != '' ">
         	AND p.cate_idx = #{category}
        </if>
	</select>
	
	<select id="projectList" parameterType="map" resultType="com.uni.fund.project.dto.ProjectDTO">
		SELECT *
		FROM (
			SELECT 
				p.pro_idx, p.pro_title, p.ori_price, p.rew_price, p.pro_deadline, m.mem_id as userId
			    , c.cate_name as cateName
			    , (SELECT pho_name 
			    	FROM photo
				    WHERE pho_division = '프로젝트대표사진'
				    AND ref_idx = p.pro_idx
				    ORDER BY pho_idx DESC
				    LIMIT 1) as pro_main_name
				, (SELECT round((sum(pa.total_price) / (p.rew_price * p.rew_max)) * 100)
			    	FROM project_apply pa
			    	WHERE pa.pro_idx = p.pro_idx and pa.fund_state='A' group by pa.pro_idx) as progress
			    , COUNT(pl.pro_idx) as like_cnt
			    , COUNT(b.pro_idx) as favorites
			FROM project p
			LEFT JOIN member m on m.mem_idx = p.mem_idx
			LEFT JOIN project_like pl on p.pro_idx = pl.pro_idx
			LEFT JOIN category c on p.cate_idx = c.cate_idx	
			LEFT JOIN bookmark b on b.pro_idx = p.pro_idx
			WHERE p.pro_state IN('B','C')
				<if test="keyword != null and kewyword != '' ">
	        		AND p.pro_title like CONCAT('%',#{keyword},'%')
	        	</if>
	        	<if test="category != null and category != '' ">
	        		AND p.cate_idx = #{category}
	        	</if>
        	GROUP BY p.pro_idx) T
        	<choose>
			<when test="filter == 'recent'"> ORDER BY T.pro_idx DESC </when>
	    	<when test="filter == 'progress'"> ORDER BY T.progress DESC, T.pro_idx DESC </when>
	    	<when test="filter == 'like'"> ORDER BY T.like_cnt DESC, T.pro_idx DESC </when>
	    	<when test="filter == 'favorites'"> ORDER BY T.favorites DESC, T.pro_idx DESC </when>
			<otherwise> ORDER BY T.pro_idx DESC </otherwise>
			</choose>
			LIMIT #{start}, 8
	</select>
	
	<select id="checkProject" resultType="int">
		SELECT count(pro_idx) FROM project WHERE pro_state IN('A','C','B') AND pro_startdate > NOW() AND mem_idx=#{param1}
	</select>
	
	<select id="projectReadLike" resultType="int">
		SELECT count(*) FROM project_like WHERE pro_idx=#{param1} AND mem_idx=#{param2}
	</select>
	
	<select id="projectCheckLike" resultType="int">
		SELECT count(*) FROM project_like WHERE pro_idx=#{param1} AND mem_idx=#{param2}
	</select>
	
	<select id="projectReadFavorites" resultType="int">
		SELECT count(*) FROM bookmark WHERE pro_idx=#{param1} AND mem_idx=#{param2}
	</select>
	
	<select id="projectCheckFavorites" resultType="int">
		SELECT count(*) FROM bookmark WHERE pro_idx=#{param1} AND mem_idx=#{param2}
	</select>
	
	<insert id="projectAddLike">
		INSERT INTO project_like VALUES(#{param1},#{param2})
	</insert>
	
	<delete id="projectDisLike">
		delete FROM project_like WHERE pro_idx=#{param1} AND mem_idx=#{param2}
	</delete>

	<insert id="funding" parameterType="map">
		insert into project_apply (pro_idx,mem_idx,rew_cnt,mile_use,total_price)
			values(#{pro_idx},#{mem_idx},#{rew_quantity},#{mileage},#{total_price})	
	</insert>
	
	<update id="moneyMng" parameterType="map">
		UPDATE `member` SET 
			mem_cash = (select mem_cash from member where mem_idx = #{mem_idx})-(#{total_price}-#{mileage}),
			mem_mileage = (select mem_mileage from member where mem_idx = #{mem_idx})-#{mileage}
		WHERE mem_idx = #{mem_idx}
	</update>
	
	<update id="fundingCancle" parameterType="map">
		update project_apply set
			fund_state = 'B' where pro_idx = #{pro_idx} and mem_idx = #{mem_idx};
	</update>
	
	<update id="moneyRefund" parameterType="map">
		UPDATE `member` SET 
			mem_cash = (select mem_cash from member where mem_idx = #{mem_idx})
									+(select total_price-mile_use from project_apply where mem_idx = #{mem_idx} and pro_idx = #{pro_idx} order by fund_idx desc limit 1),
			mem_mileage = (select mem_mileage from member where mem_idx = #{mem_idx})
										+(select mile_use from project_apply where mem_idx = #{mem_idx} and pro_idx = #{pro_idx} order by fund_idx desc limit 1)
		WHERE mem_idx = #{mem_idx};
	</update>
	
	<insert id="reviewDo" useGeneratedKeys="true" keyColumn="rev_idx" keyProperty="rev_idx" parameterType="com.uni.fund.project.dto.ProjectDTO">
		INSERT INTO project_review (pro_idx,mem_idx,rev_content,rev_grade,rev_state)
			VALUES (#{pro_idx},#{mem_idx},#{rev_content},#{rev_grade},'show')
	</insert>
	
	<insert id="revFileWrite">
		INSERT INTO photo (pho_name,ref_idx,pho_division)
			VALUES(#{param2},#{param1},'리뷰')
	</insert>
	
	<select id="revList" resultType="com.uni.fund.project.dto.ReviewDTO">
		select
			mem_idx as id, rev_idx, pro_idx, rev_content, rev_grade, rev_date, rev_state,pho_name,
			(select mem_id from `member` m where mem_idx = pr.mem_idx) as mem_id,
			(select pho_name from photo p2 where pho_division = '프로필' and ref_idx = id) as profile
		from 
			project_review pr 
		right join 
			photo p on pr.rev_idx = p.ref_idx 
		where pr.pro_idx = #{param1} and p.pho_division = '리뷰' and pr.rev_state = 'show' order by rev_date desc limit #{param2};
	</select>
	
	<update id="revDel">
		UPDATE project_review SET rev_state = 'blind' WHERE rev_idx = #{param1} 
	</update>
	
	<update id="mileageSaveUp">
		update member set mem_mileage = (select mem_mileage from member where mem_idx = #{param1}) + 5 where mem_idx = #{pram1}
	</update>
	
	<select id="appListCall" resultType="com.uni.fund.project.dto.ProjectDTO">
		select mem_id , CONCAT(mem_addr,' ',mem_detail) as mem_addr , mem_number
			from `member` m join project_apply pa on m.mem_idx = pa.mem_idx where pro_idx = #{param3} and fund_state = 'C' LIMIT #{param1},#{param2}
	</select>
	
	<select id="allCount" resultType="int">
		SELECT CEIL(COUNT(mem_id)/#{param1}) AS pages FROM `member` m join project_apply pa on m.mem_idx = pa.mem_idx where pro_idx = #{param2} and fund_state = 'C'
	</select>
	
	<insert id="likeDo" parameterType="String">
		insert into project_like(pro_idx,mem_idx)values(#{param1},#{param2})
	</insert>
	
	<delete id="likeCancle" parameterType="String">
		delete from project_like where pro_idx = #{param1} and mem_idx = #{param2}
	</delete>
	
	<insert id="favorite" parameterType="String">
		insert into bookmark(pro_idx,mem_idx)values(#{param1},#{param2})
	</insert>
	
	<delete id="favoriteCancle" parameterType="String">
		delete from bookmark where pro_idx = #{param1} and mem_idx = #{param2}
	</delete>
	
	<select id="adminList" resultType="com.uni.fund.project.dto.ProjectDTO">
		select 
		 	*,
		 	(select mem_id from member where mem_idx = p.mem_idx) as mem_id,
		 	rew_price * rew_max  as target_price,
		 	round(((ori_price-rew_price)/ori_price)*100) as progress
		from project p left join (select pro_idx ,SUM(total_price)as now_price from project_apply  where fund_state = 'A' group by pro_idx) pa on p.pro_idx = pa.pro_idx
		<if test='param1 != " " and param1 != "전체"'>
			where pro_state = #{param1}
		</if>
		order by pro_regdate desc  LIMIT #{param2},#{param3}
	</select>
	
	<select id="search" resultType="com.uni.fund.project.dto.ProjectDTO">
		select 
		 	*,
		 	rew_price * rew_max  as target_price,
		 	(select mem_id from member where mem_idx = p.mem_idx) as mem_id,
		 	round(((ori_price-rew_price)/ori_price)*100) as progress
		from project p left join (select pro_idx ,SUM(total_price)as now_price from project_apply  where fund_state = 'A' group by pro_idx) pa on p.pro_idx = pa.pro_idx
			where pro_title like concat('%',#{param1},'%')
		order by pro_regdate desc LIMIT #{param2},#{param3}
	</select>
	
	<select id="adminAllCount" resultType="int">
		SELECT CEIL(COUNT(pro_idx)/#{param2}) AS pages FROM project p2
		<if test='param1 != " " and param1 != "전체"'>
			where pro_state = #{param1}
		</if>
	</select>
	
	<select id="searchAllCount" resultType="int">
		SELECT CEIL(COUNT(pro_idx)/#{param2}) AS pages FROM project p2 where pro_title like concat('%',#{param1},'%')
	</select>
	
	<select id="stateCheck" resultType="String">
		SELECT pro_state FROM project WHERE pro_idx = #{param1}
	</select>
	
	<insert id="agreeHis">
		insert into project_admin (pro_idx,rsn_content,pro_state) values (#{param1},'프로젝트 승인','승인')
	</insert>
	
	<update id="agree">
		update project set pro_state = 'C' where pro_idx = #{param1}
	</update>
	
</mapper>